<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Disaster Area</title>
 <link href="http://blog.vivekprahlad.com/atom.xml" rel="self"/>
 <link href="http://blog.vivekprahlad.com/"/>
 <updated>2014-09-23T19:28:30+08:00</updated>
 <id>http://blog.vivekprahlad.com</id>
 <author>
   <name>Vivek Prahlad</name>
   <email></email>
 </author>

 
 <entry>
   <title>A new beginning</title>
   <link href="http://blog.vivekprahlad.com/a-new-beginning"/>
   <updated>2014-09-21T00:00:00+08:00</updated>
   <id>http://blog.vivekprahlad.com/a-new-beginning</id>
   <content type="html">&lt;p&gt;I&amp;#39;ve finally got around to resurrecting my blog. Here we go again! &lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Versioning Rails models with Neo4j.rb</title>
   <link href="http://blog.vivekprahlad.com/versioning-rails-models-with-neojrb"/>
   <updated>2011-11-14T00:00:00+08:00</updated>
   <id>http://blog.vivekprahlad.com/versioning-rails-models-with-neojrb</id>
   <content type="html">&lt;p&gt;I recently helped add versioning support to &lt;a href=&quot;https://github.com/andreasronge/neo4j&quot;&gt;Neo4j.rb&lt;/a&gt;. Versioning only works for Rails models at the moment. To add versioning to your model, you&amp;#39;ll need include the Versioning module:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;VersionableModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Neo4j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Model&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Neo4j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Versioning&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;How it works&lt;/h3&gt;

&lt;p&gt;Versioning creates snapshots under a given rails model instance. Note that snapshots aren&amp;#39;t Rails models, but vanilla nodes. The relationship from the instance to its snapshot versions captures information about the snapshot, such as the version number, the class that is being versioned, and the id of the versioned model. When asked to retrieve a particular version of an model, the versioning module internally does a lucene search using all of these parameters.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/versioning_with_neo4jrb/versioning.png&quot; alt=&quot;Versioning&quot;&gt;&lt;/p&gt;

&lt;h3&gt;Full snapshots&lt;/h3&gt;

&lt;p&gt;Snapshots currently capture all the properties of an instance. The snapshots create links to the same nodes that are linked to an instance, with one important difference. The snapshot&amp;#39;s relationships all have a &lt;code&gt;&amp;#39;version_&amp;#39;&lt;/code&gt; prefix - the prefix is added in order to distinguish between &amp;#39;regular&amp;#39; relationships and those created for versioning. Both incoming as well as outgoing relationships are recorded.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s look at an example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SportsCar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Neo4j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Model&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Neo4j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Versioning&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:brand&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Driver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Neo4j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Model&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Neo4j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Versioning&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:sports_cars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Version 1&lt;/h3&gt;

&lt;p&gt;With version 1 of the driver, there are no links to any cars:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Walter Plinge&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/versioning_with_neo4jrb/version1.png&quot; alt=&quot;Version 1&quot;&gt;&lt;/p&gt;

&lt;h3&gt;Version 2&lt;/h3&gt;

&lt;p&gt;With version 2, we link the driver to a sports car - a Porsche.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sports_cars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Sportscar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:brand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Porsche&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/versioning_with_neo4jrb/version2.png&quot; alt=&quot;Version 2&quot;&gt;&lt;/p&gt;

&lt;p&gt;Now, both the driver and the current version are linked to the Porsche.&lt;/p&gt;

&lt;h3&gt;Version 3&lt;/h3&gt;

&lt;p&gt;With version 3, we link the driver to a second car - a Ferrari. The graph now starts getting complicated.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/versioning_with_neo4jrb/version3.png&quot; alt=&quot;Version 3&quot;&gt;&lt;/p&gt;

&lt;p&gt;The driver, as well as the latest snapshot, are both linked to two cars - the Porsche and the Ferrarri.&lt;/p&gt;

&lt;h3&gt;Working with a version&lt;/h3&gt;

&lt;p&gt;To retrieve a snapshot, you&amp;#39;ll need to call the version API.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The snapshot object will respond to the exact same properties as those on instance. It also allows relationships to be traversed using the incoming / outgoing API. The prefix stuff I&amp;#39;d mentioned above is handled transparently, so you can continue to use the same relationship names that you&amp;#39;ve used in your model.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outgoing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:sports_cars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#Returns two cars as expected&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Reverting to a snapshot&lt;/h3&gt;

&lt;p&gt;To revert to a particular version, simply call&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;revert_to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Revert restores properties and relationships, and creates a new version. So in the driver / car example, let&amp;#39;s see what the driver example looks like when we revert to version 2:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;revert_to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/versioning_with_neo4jrb/version4.png&quot; alt=&quot;Version 4&quot;&gt; 
This creates a new version (version 4), and ensures that the driver is linked to one sports car, just like it was with version 2.&lt;/p&gt;

&lt;h3&gt;Max versions&lt;/h3&gt;

&lt;p&gt;If you&amp;#39;d like to limit the maximum number of versions, use the max_versions declaration in your model class. This deletes the oldest version once the max versions threshold is exceeded.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MaxVersionModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Neo4j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Model&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Neo4j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Versioning&lt;/span&gt;
 
  &lt;span class=&quot;n&quot;&gt;max_versions&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Gotchas&lt;/h3&gt;

&lt;p&gt;In case any of the nodes linked to an instance are deleted, the versioning support makes no attempt to capture this. The relationship between the snapshot and such a node simply disappears.&lt;/p&gt;

&lt;p&gt;In other words, when related nodes are deleted, reverting a node to it&amp;#39;s previous version will not recreate deleted nodes and relationships.&lt;/p&gt;

&lt;h3&gt;Future improvements&lt;/h3&gt;

&lt;p&gt;The versioning support doesn&amp;#39;t currently capture properties on relationships, but that should be relatively straightforward to address.&lt;/p&gt;

&lt;p&gt;Deleting a node does not always delete its snapshots (this can happen whenever snapshots have relationships to other nodes). On second thoughts, this sounds more like a bug than an improvement :-).&lt;/p&gt;

&lt;p&gt;Finally, supporting delta updates would allow more efficient storage (like I said earlier, each snapshot currently stores all the properties of a model).&lt;/p&gt;

&lt;p&gt;That&amp;#39;s about it, feedback and comments welcome!&lt;/p&gt;

&lt;p&gt;PS: In case you&amp;#39;re wondering who Walter Plinge is, check out &lt;a href=&quot;http://en.wikipedia.org/wiki/Walter_Plinge&quot;&gt;http://en.wikipedia.org/wiki/Walter_Plinge&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Multitenancy with Neo4j.rb</title>
   <link href="http://blog.vivekprahlad.com/multitenancy-with-neojrb"/>
   <updated>2011-11-05T00:00:00+08:00</updated>
   <id>http://blog.vivekprahlad.com/multitenancy-with-neojrb</id>
   <content type="html">&lt;p&gt;A little while ago, I&amp;#39;d helped add multitenancy support to &lt;a href=&quot;https://github.com/andreasronge/neo4j&quot;&gt;Neo4j.rb&lt;/a&gt;. This allows the same Neo4j database instance to support multiple tenants/customers simultaneously. There are several ways of achieving multitenancy, but the main aim of the current solution was to minimize the number of required changes to an existing codebase.&lt;/p&gt;

&lt;p&gt;So here&amp;#39;s how it all works.&lt;/p&gt;

&lt;h3&gt;Partitioning graphs&lt;/h3&gt;

&lt;p&gt;The Neo4j.rb multitenancy approach partitions the graph in such a way that all queries and traversals are scoped to a given tenant. This means that queries like Order.all, for example would return different (and correct) results depending on what the current tenant is.&lt;/p&gt;

&lt;p&gt;Once Neo4j supports sharding, it should be possible to adapt this scheme to take advantage of it.&lt;/p&gt;

&lt;h3&gt;Reference nodes&lt;/h3&gt;

&lt;p&gt;The reference node is a starting point in the graph space. All Neo4j graphs are connected by default, which basically means that nodes and relationships cannot exist in isolation. The multitenancy feature works by &amp;#39;moving&amp;#39; the reference node to whatever the current tenant is.&lt;/p&gt;

&lt;h3&gt;The Neo4j.rb metamodel&lt;/h3&gt;

&lt;p&gt;Neo4j.rb stores type metadata in the graph. Let&amp;#39;s consider an example where we have two models: Tenant and Country.&lt;/p&gt;

&lt;p&gt;In the screenshot below, the home icon represents the reference node, which the default starting point in the graph. From the reference node, each model type has an outgoing relationship, named after the model class. Neo4j.rb refers to the node at the end of this relationship as a Rule node. The &amp;#39;all&amp;#39; rule node is connected to every instance, and its count property keeps track of the number of instances.&lt;/p&gt;

&lt;p&gt;This particular database has a single tenant instance...&lt;/p&gt;

&lt;p&gt;... and three countries. The &lt;code&gt;_classname&lt;/code&gt; property stores the Rails model class name for a given node.&lt;/p&gt;

&lt;h3&gt;Tenants&lt;/h3&gt;

&lt;p&gt;While creating new tenants, it&amp;#39;s often necessary to set up data for each tenant. Here&amp;#39;s one way of doing this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Tenant&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Neo4j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Model&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ref_node&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Neo4j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default_ref_node&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;after_create&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:create_default_data&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_default_data&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Neo4j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;threadlocal_ref_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/db/tenant_default_data.rb&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In case it takes a while to set up the data for a client, it&amp;#39;s worth doing the data setup in the background.&lt;/p&gt;

&lt;h3&gt;&amp;#39;Movable&amp;#39; reference nodes&lt;/h3&gt;

&lt;p&gt;Changing the reference node to a tenant ends up effectively partioning the graph. All tenant specific entities end up getting attached under the tenant, like so for Tenant 1:&lt;/p&gt;

&lt;p&gt;... and for Tenant 2.&lt;/p&gt;

&lt;h3&gt;Setting the Threadlocal reference node&lt;/h3&gt;

&lt;p&gt;Neo4j.rb allows a reference node to be set for the current thread. A :before_filter method in your controller is a reasonable place to set the threadlocal reference node.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrdersController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
 
&lt;span class=&quot;n&quot;&gt;before_filter&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:authenticate_user!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:ensure_tenant_setup!&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;protected&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ensure_tenant_setup!&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Neo4j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;threadlocal_ref_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tenant&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Lucene Indexing&lt;/h3&gt;

&lt;p&gt;By default, for every Rails model, Neo4j.rb creates lucene indices using this format:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;TopLevelModulename&amp;gt;_&amp;lt;NextlevelModuleName&amp;gt;_&amp;lt;ModelClassName&amp;gt;-exact/fulltext&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The multitenancy work adds the tenant name as an additional dimension to the index name. Each tenant node contributes an index prefix. The prefix makes it possible to partition the lucene index on a per tenant basis.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;Tenant Name&amp;gt;_&amp;lt;TopLevelModulename&amp;gt;_&amp;lt;NextlevelModuleName&amp;gt;_&amp;lt;ModelClassName&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The net effect is that lucene queries are scoped to the current tenant. (Except in the case of shared models, which are accessible across all tenants and use a single lucene index).&lt;/p&gt;

&lt;h3&gt;Reference data / Shared models&lt;/h3&gt;

&lt;p&gt;What about data that&amp;#39;s shared across tenants? Examples could be a list of valid currencies, or a list of countries. It doesn&amp;#39;t make sense to replicate this data on a per tenant basis. To handle these kind of entities, you can declare the model&amp;#39;s reference node to be the default reference node, which ensures that all instances of the model are accessible across all tenants.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Country&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Neo4j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Model&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ref_node&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;neo4j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default_ref_node&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Gotchas&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Clearing the reference node&lt;/em&gt;
Neo4j.rb has Rack middleware that resets the reference node after every request. In Rails&amp;#39; multithreaded mode, you could end up with stale / wrong reference nodes in case this were not done.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;The &amp;#39;too many open files&amp;#39; problem&lt;/em&gt;
Since sets of lucene indices are created for each tenant, you can expect approximately 7 * N * T open files, where N is the total number of models, and T is the total number of tenants. By default, Neo4j&amp;#39;s Lucene IndexWriters are never closed (keeping the writers open improves performance). The default per process file limit is 1024 on Linux.
I&amp;#39;ve submitted a pull request to the Neo4j database here to fix this issue. (See &lt;a href=&quot;https://github.com/neo4j/community/pull/51&quot;&gt;https://github.com/neo4j/community/pull/51&lt;/a&gt;). The fix involves using a configurable LRU cache for Lucene index writers/searchers.&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 

</feed>
